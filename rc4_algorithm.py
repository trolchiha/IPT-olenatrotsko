MOD = 256

def KSA(key):
    '''
    Key Scheduling Algorithm (KSA) for RC4.

    Parameters:
        key (list): The encryption key represented as a list of integers.

    Returns:
        list: The generated schedule (S-box) for the given key.
    '''
    sched = [i for i in range(0, MOD)]
    
    i = 0
    for j in range(0, MOD):
        i = (i + sched[j] + key[j % len(key)]) % MOD
        tmp = sched[j]
        sched[j] = sched[i]
        sched[i] = tmp

    return sched


def PRGA(sched):
    '''
    Pseudo-Random Generation Algorithm (PRGA) for RC4.

    Parameters:
        sched (list): The schedule (S-box) generated by KSA.

    Yields:
        int: The next pseudo-random value from the keystream.
    '''
    i = 0
    j = 0
    
    while True:
        i = (i + 1) % MOD
        j = (j + sched[i]) % MOD
        tmp = sched[j]
        sched[j] = sched[i]
        sched[i] = tmp
        
        yield sched[(sched[i] + sched[j]) % MOD]
    

def get_keystream(key):
    '''
    Generate the keystream for RC4 using the given encryption key.

    Parameters:
        key (list): The encryption key represented as a list of integers.

    Returns:
        generator: A generator object representing the keystream.
    '''
    S = KSA(key)
    return PRGA(S)
